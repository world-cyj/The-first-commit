实现思路
1.界面上可以点开的各种实际都是按钮
创建9行9列的二维数组，
然后根据这个数组来创建JButton。

2.对应创建二维数组data，用来存取数据，
0表示周围无雷，
-1表示当前是雷，
其他数字表示周围雷的数量。

3.对应创建二维数组state，用来存取按钮状态，
0 未打开，
1 打开
2 旗子
3 未知（控制显示对应的图标）

4.设置雷：随机行数 i 和列数 j，根据随机到 i、j
从二维数组data中取出对应的元素值，
若值不为-1（不是雷），
则将此元素data[i][j]设置为-1，
若值是-1（已经是雷了），
则跳过，不管是否跳过都进行递归，
直到雷的数量达到设定的最大数量，跳出递归。

5.设置周围雷的数量：计算每个元素周围的雷数量
（周围指的是 左上、上、右上、右、右下、下、左下、左 这8个位置），
循环二维数组data，判断当前值不是-1，则需要计算周围雷的数量，等会细说。

6.有任一格子被揭开，则游戏开始并且计时，
当格子被揭开的时候分3种情况

（1）格子是雷，执行爆炸动画，游戏结束。

（2）当前格子周围有雷，则仅仅打开此格子，
对应显示周围雷数量的数字图片。

（3）当前格子不是雷且周围没有雷（data取到的元素值为0），
则依次打开周围，并且被打开的周围元素也没有雷的情况下，继续打开（递归）。

7.右键可以进行插小旗、打问号等操作（对数组state进行的操作）。




设置游戏区域按钮
1.创建容器，并采用GridLayout 布局。

2.根据设定的ROWS、COLS创建二维数组，
数组存储JButton
给每个按钮设置图标。

3.给每个按钮添加鼠标点击事件，右键事件。


设置雷
1.随机行数 i 和列数 j，根据随机到 i、j
从二维数组data中取出对应的元素值。

2.判断值，若值不为-1（不是雷），则将此元素data[i][j]设置为-1，
若值是-1（已经是雷了），则跳过。

3.不管上一步是否跳过都进行递归，直到雷数量达到设定的最大数量，跳出递归。



计算周围雷的数量并显示
1.循环之前的二维数组data，元素值是-1（雷）跳过，不是-1则继续。

2.如果当前元素的下标是（i，j），则左上为（i-1,j-1），
上为（i-1,j )，右上为（i-1,j+1），以此类推，如下图所示：

3.分别取出这8个元素，并判断他们是不是雷，如果是则计数累加，
最后把这个计数赋值给元素data[i][j]。


添加点击事件
1.让代码实现ActionListener

2.重写方法actionPerformed，获取点击的按钮进行揭开操作（分3种情况）：

（1）格子是雷，执行爆炸动画，游戏结束。

（2）当前格子周围有雷，则仅仅打开此格子，显示周围雷数量的数字图片。

（3）当前格子不是雷且周围没有雷（data取到的元素值为0），
则依次打开周围，并且被打开的周围元素也没有雷的情况下，继续打开（递归）。


触雷爆炸
爆炸采用线程来执行，就是切换图片，图片切换到最后一张后线程结束，
回调定义好的方法进行结束提示、打开所有格子等操作。

鼠标右键事件
1.实现MouseListener，重写mouseClicked方法。

2.如果按钮是未打开状态则设置为旗子（设置state数组对应的元素值：2）。

3.如果按钮是旗子状态则设置为未知（设置state数组对应的元素值：3）。

4.如果按钮是未知状态则设置为原来的状态未打开（
设置state数组对应的元素值：0）。
————————————————


胜利判定
1.判断旗子的位置是不是正确的雷，并统计数量，
如果统计到的数量刚好和设定的雷总数一样，证明雷全部被查出了，判定为胜利。

2.如果未打开的数量与设定雷的总数一样，也判定为胜利。


最后加入重新开始事件就完成了。
重新开始就是重新设置相关参数。

